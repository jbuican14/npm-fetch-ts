{"version":3,"sources":["state/action.types/index.ts","state/reducers/repositories.reducer.ts","state/reducers/index.ts","state/store.ts","state/action.creators/index.ts","hooks/useTypedSelector.ts","components/RepositoriesList.tsx","hooks/useActions.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","initialState","loading","error","data","reducer","state","action","type","SEARCH_REPOSITORIES","SEARCH_REPOSITORIES_SUCCESS","payload","SEARCH_REPOSITORIES_ERROR","reducers","combineReducers","repositories","repositoriesReducer","store","createStore","applyMiddleware","thunk","searchRepositories","term","dispatch","a","axios","get","params","text","names","objects","map","result","package","name","message","useTypedSelector","useSelector","RepositoriesList","useState","setTerm","useDispatch","bindActionCreators","actionCreators","useActions","dataR","console","log","onSubmit","event","preventDefault","value","onChange","e","target","className","href","rel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAAYA,E,wEAAAA,K,0CAAAA,E,0DAAAA,E,uDAAAA,M,KCSZ,IAAMC,EAAe,CACnBC,SAAS,EACTC,MAAO,KACPC,KAAM,IAsBOC,EAnBC,WAGS,IAFvBC,EAEsB,uDAFKL,EAC3BM,EACsB,uCACtB,OAAQA,EAAOC,MACb,KAAKR,EAAWS,oBACd,MAAO,CAAEP,SAAS,EAAMC,MAAO,KAAMC,KAAM,IAE7C,KAAKJ,EAAWU,4BACd,MAAO,CAAER,SAAS,EAAOC,MAAO,KAAMC,KAAMG,EAAOI,SAErD,KAAKX,EAAWY,0BACd,MAAO,CAAEV,SAAS,EAAOC,MAAOI,EAAOI,QAASP,KAAM,IAExD,QACE,OAAOE,ICvBEO,EAJEC,YAAgB,CAC/BC,aAAcC,ICAHC,EAAQC,YAAYL,EAAU,GAAIM,YAAgBC,M,yCCClDC,EAAqB,SAACC,GAEjC,8CAAO,WAAOC,GAAP,mBAAAC,EAAA,6DACLD,EAAS,CACPf,KAAMR,EAAWS,sBAFd,kBAMoBgB,IAAMC,IAC3B,yCACA,CACEC,OAAQ,CACNC,KAAMN,KAVT,gBAMKlB,EANL,EAMKA,KASFyB,EAAQzB,EAAK0B,QAAQC,KAAI,SAACC,GAC9B,OAAOA,EAAOC,QAAQC,QAExBX,EAAS,CACPf,KAAMR,EAAWU,4BACjBC,QAASkB,IApBR,kDAuBHN,EAAS,CACPf,KAAMR,EAAWY,0BACjBD,QAAS,KAAIwB,UAzBZ,0DAAP,uD,QCJWC,EAAoDC,I,OC0ClDC,EAzCoB,WACjC,MAAwBC,mBAAS,IAAjC,mBAAOjB,EAAP,KAAakB,EAAb,KACQnB,ECFgB,WACxB,IAAME,EAAWkB,cAEjB,OAAOC,YAAmBC,EAAgBpB,GDDXqB,GAAvBvB,mBACR,EAAiCe,GAC/B,SAAC9B,GAAD,OAAWA,EAAMS,gBADXX,EAAR,EAAQA,KAAMD,EAAd,EAAcA,MAAOD,EAArB,EAAqBA,QAIf2C,EAAQT,GAAiB,SAAC9B,GAAD,OAAWA,KAC1CwC,QAAQC,IAAI,UAAWF,GAOvB,OACE,gCACE,uBAAMG,SARO,SAACC,GAChBA,EAAMC,iBAEN7B,EAAmBC,IAKjB,UACE,uBAAO6B,MAAO7B,EAAM8B,SAAU,SAACC,GAAD,OAAOb,EAAQa,EAAEC,OAAOH,UACtD,+CAEDhD,GAAS,6BAAKA,IACdD,GAAW,8CACVC,IACCD,GACDE,EAAK2B,KAAI,SAACG,GAAD,OACP,sBAAgBqB,UAAU,SAA1B,UACE,mBAAGA,UAAU,yBAA4B,IACzC,mBACEC,KAAI,wCAAmCtB,GACvCoB,OAAO,SACPG,IAAI,aAHN,SAKGvB,MAPKA,UEfLwB,MAXf,WACE,OACE,cAAC,IAAD,CAAUzC,MAAOA,EAAjB,SACE,gCACE,sDACA,cAAC,EAAD,UCKO0C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9b2af73f.chunk.js","sourcesContent":["export enum ActionType {\n  SEARCH_REPOSITORIES = 'search_repositories',\n  SEARCH_REPOSITORIES_SUCCESS = 'search_repositories_success',\n  SEARCH_REPOSITORIES_ERROR = 'search_repositories_error',\n}\n","import { ActionType } from '../action.types';\nimport { Action } from '../actions';\n\ninterface RepositoriesState {\n  loading: boolean;\n  error: string | null;\n  data: string[];\n}\n\nconst initialState = {\n  loading: false,\n  error: null,\n  data: [],\n};\n\nconst reducer = (\n  state: RepositoriesState = initialState,\n  action: Action\n): RepositoriesState => {\n  switch (action.type) {\n    case ActionType.SEARCH_REPOSITORIES:\n      return { loading: true, error: null, data: [] };\n\n    case ActionType.SEARCH_REPOSITORIES_SUCCESS:\n      return { loading: false, error: null, data: action.payload };\n\n    case ActionType.SEARCH_REPOSITORIES_ERROR:\n      return { loading: false, error: action.payload, data: [] };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport repositoriesReducer from './repositories.reducer';\n\nconst reducers = combineReducers({\n  repositories: repositoriesReducer,\n});\n\nexport default reducers;\n\nexport type RootState = ReturnType<typeof reducers>;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\n\nexport const store = createStore(reducers, {}, applyMiddleware(thunk));\n","import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { ActionType } from '../action.types';\nimport { Action } from '../actions';\n\nexport const searchRepositories = (term: string) => {\n  // Action is refering to our src/state/action.creators/index.ts\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({\n      type: ActionType.SEARCH_REPOSITORIES,\n    });\n\n    try {\n      const { data } = await axios.get(\n        'https://registry.npmjs.org/-/v1/search',\n        {\n          params: {\n            text: term,\n          },\n        }\n      );\n\n      const names = data.objects.map((result: any) => {\n        return result.package.name;\n      });\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_SUCCESS,\n        payload: names,\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_ERROR,\n        payload: err.message,\n      });\n    }\n  };\n};\n","import { useSelector, TypedUseSelectorHook } from 'react-redux';\nimport { RootState } from '../state';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useState } from 'react';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { useActions } from '../hooks/useActions';\n\nconst RepositoriesList: React.FC = () => {\n  const [term, setTerm] = useState('');\n  const { searchRepositories } = useActions();\n  const { data, error, loading } = useTypedSelector(\n    (state) => state.repositories\n  );\n\n  const dataR = useTypedSelector((state) => state);\n  console.log('dataR::', dataR);\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    searchRepositories(term);\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input value={term} onChange={(e) => setTerm(e.target.value)} />\n        <button>Search</button>\n      </form>\n      {error && <h3>{error}</h3>}\n      {loading && <h3>Loading ...</h3>}\n      {!error &&\n        !loading &&\n        data.map((name) => (\n          <div key={name} className=\"result\">\n            <i className=\"fas fa-chevron-right\"></i>{' '}\n            <a\n              href={`https://www.npmjs.com/package/${name}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              {name}\n            </a>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default RepositoriesList;\n","import { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actionCreators } from '../state';\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n\n  return bindActionCreators(actionCreators, dispatch);\n};\n","import { Provider } from 'react-redux';\nimport { store } from '../state';\nimport RepositoriesList from './RepositoriesList';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>\n        <h1>Search For a Package</h1>\n        <RepositoriesList />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}